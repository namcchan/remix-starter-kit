name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm install -g bun && bun install

    - name: Set up .env file
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env

    - name: Execute migrations
      run: bun run prisma:migrate

    - name: Build the Remix application
      run: bun run build

    - name: Archive build folder
      run: tar -czf build.tar.gz build

    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: build-artifact
        path: build.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: build-artifact
        path: .

    - name: Copy build folder to VPS
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "build.tar.gz"
        target: "~/app/build.tar.gz"

    - name: SSH into VPS and deploy
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd ~/app
          rm -rf build
          tar -xzf build.tar.gz
          rm build.tar.gz
          if pm2 list | grep -q "remix-app"; then
            pm2 restart remix-app
          else
            pm2 start server.js --name remix-app
